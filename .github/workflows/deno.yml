# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will install Deno and run tests across stable builds Ubuntu.
# For more information see: https://github.com/denoland/setup-deno

name: Deno

on:
  pull_request:
    branches: [develop, master]

jobs:
  launch-and-test-website-local:
    runs-on: ${{ matrix.os }} # runs build on Ubuntu

    # only use one version on ubuntu but let strategy be there for maybe later changes
    strategy:
      matrix:
        deno: ["v1.11.3"]
        os: [ubuntu-latest]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ matrix.deno }} # setup deno with given version

      - name: Setup .env
        run: cp ./example_envs/.env_default_ci .env

      - name: Run linter
        run: deno lint --ignore=frontend/

      - name: Cache dependencies
        run: ./scripts/cache.sh -t

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.6.0
      
        # use '&' to detach process and go on
      - name: Launch server
        run: ./scripts/launch_website.sh &

      - name: Wait 10 secs for server startup
        run: sleep 10

      - name: Run tests
        run: deno test --unstable --allow-all

  launch-and-test-website-docker:
    runs-on: ${{ matrix.os }} # runs build on Ubuntu

    # only use one version on ubuntu but let strategy be there for maybe later changes
    strategy:
      matrix:
        deno: ["v1.11.3"]
        os: [ubuntu-latest]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ matrix.deno }} # setup deno with given version
      
      - name: Setup .env
        run: cp ./example_envs/.env_mongo_network_ci .env
      
      - name: Load .env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .env

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          file: docker/Dockerfile
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          push: false
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/deno-website:ci

      # - name: Build docker image
      #   run: docker build -t robertfent1/deno-website:ci -f docker/Dockerfile .

      - name: Start MongoDB
        run: docker-compose -f ./docker/docker-compose_db.yml up -d

      - name: Launch Website
        run: docker-compose -f ./docker/docker-compose_deno.yml up -d

      - name: Wait 10 secs for server startup
        run: sleep 10

      - name: Run tests
        run: deno test --unstable --allow-all

  deliver-docker-image:
    needs: launch-and-test-website-docker
    runs-on: ${{ matrix.os }} # runs build on Ubuntu

    # only use one version on ubuntu but let strategy be there for maybe later changes
    strategy:
      matrix:
        deno: ["v1.11.3"]
        os: [ubuntu-latest]
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup .env
        run: cp ./example_envs/.env_mongo_network_ci .env
      
      - name: Load .env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .env

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          file: docker/Dockerfile
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/deno-website:ci